from machine import Pin, Timer
import random

class Display:
    def __init__(self):
        self.a0 = Pin(16, Pin.OUT)
        self.a1 = Pin(18, Pin.OUT)
        self.a2 = Pin(22, Pin.OUT)

        self.sdi = Pin(11, Pin.OUT)
        self.clk = Pin(10, Pin.OUT)
        self.le = Pin(12, Pin.OUT)

        self.CS_cnt = 0
        self.leds = [[0] * 24 for i in range(0,8)]
        self.disp_offset = 2
        self.initialise_fonts()

    def start(self):
        self.timer = Timer(period=1, callback=self.repeating_timer_callback_ms)

    def repeating_timer_callback_ms(self, timer):
        self.CS_cnt = (self.CS_cnt+1)%8
        
        led_row = self.leds[self.CS_cnt]
        for col in range(24):
            self.clk.value(0)
            self.sdi.value(led_row[col])
            self.clk.value(1)
        
        self.le.value(1)
        self.le.value(0)
        self.a0.value(1 if self.CS_cnt&0x01 else 0)
        self.a1.value(1 if self.CS_cnt&0x02 else 0)
        self.a2.value(1 if self.CS_cnt&0x04 else 0)

    def show(self, pos, character):
        print("PRINTING", character)
        pos+=self.disp_offset-8 # Plus the offset of the status indicator 
        char = self.ziku[character]
        for row in range(1,8):
            byte = char.rows[row-1]
            for col in range(0, char.width):
                print("---ROW:%d POS:%d COL:%d LED:%d" % (row, pos, col, (byte >> col) % 2))
                self.leds[row][pos+col] = (byte >> col) % 2

    def print(self):
        for row in range(0,8):
            for pos in range(0, 24):
                print("X" if self.leds[row][pos]==1 else " ", end="")
            print("")

    def square(self):
        '''
        Prints a crossed square. For debugging purposes.
        '''
        for row in range(1,8):
            self.leds[row][0]=1
            self.leds[row][23]=1
        for col in range(0,23):
            self.leds[1][col]=1
            self.leds[7][col]=1
            self.leds[int(col/24*7)+1][col]=1
            self.leds[7-int(col/24*7)][col]=1

    class Character:
        def __init__(self, width, rows):
            self.width = width
            self.rows = rows
# Derived from c code created by yufu on 2021/1/23.
# Modulus method: negative code, reverse, line by line, 4X7 font 
    def initialise_fonts(self):
        self.ziku = {
            "0": self.Character(width=4, rows=[0x06,0x09,0x09,0x09,0x09,0x09,0x06]),
            "1": self.Character(width=4, rows=[0x04,0x06,0x04,0x04,0x04,0x04,0x0E]),
            "2": self.Character(width=4, rows=[0x06,0x09,0x08,0x04,0x02,0x01,0x0F]),
            "3": self.Character(width=4, rows=[0x06,0x09,0x08,0x06,0x08,0x09,0x06]),
            "4": self.Character(width=4, rows=[0x08,0x0C,0x0A,0x09,0x0F,0x08,0x08]),
            "5": self.Character(width=4, rows=[0x0F,0x01,0x07,0x08,0x08,0x09,0x06]),
            "6": self.Character(width=4, rows=[0x04,0x02,0x01,0x07,0x09,0x09,0x06]),
            "7": self.Character(width=4, rows=[0x0F,0x09,0x04,0x04,0x04,0x04,0x04]),
            "8": self.Character(width=4, rows=[0x06,0x09,0x09,0x06,0x09,0x09,0x06]),
            "9": self.Character(width=4, rows=[0x06,0x09,0x09,0x0E,0x08,0x04,0x02]),
            "A": self.Character(width=4, rows=[0x06,0x09,0x09,0x0F,0x09,0x09,0x09]),
            "B": self.Character(width=4, rows=[0x07,0x09,0x09,0x07,0x09,0x09,0x07]),
            "C": self.Character(width=4, rows=[0x06,0x09,0x01,0x01,0x01,0x09,0x06]),
            "D": self.Character(width=4, rows=[0x07,0x09,0x09,0x09,0x09,0x09,0x07]),
            "E": self.Character(width=4, rows=[0x0F,0x01,0x01,0x0F,0x01,0x01,0x0F]),
            "F": self.Character(width=4, rows=[0x0F,0x01,0x01,0x0F,0x01,0x01,0x01]),
            "H": self.Character(width=4, rows=[0x09,0x09,0x09,0x0F,0x09,0x09,0x09]),
            "L": self.Character(width=4, rows=[0x01,0x01,0x01,0x01,0x01,0x01,0x0F]),
            "N": self.Character(width=4, rows=[0x09,0x09,0x0B,0x0D,0x09,0x09,0x09]),
            "P": self.Character(width=4, rows=[0x07,0x09,0x09,0x07,0x01,0x01,0x01]),
            "U": self.Character(width=4, rows=[0x09,0x09,0x09,0x09,0x09,0x09,0x06]),
            ":": self.Character(width=4, rows=[0x00,0x03,0x03,0x00,0x03,0x03,0x00]),        #2×7
            "°C": self.Character(width=4, rows=[0x01,0x0C,0x12,0x02,0x02,0x12,0x0C]),       # celcuis 5×7
            "°F": self.Character(width=4, rows=[0x01,0x1E,0x02,0x1E,0x02,0x02,0x02]),       # farenheit
            " ": self.Character(width=4, rows=[0x00,0x00,0x00,0x00,0x00,0x00,0x00]),        # space
            "Y": self.Character(width=4, rows=[0x1F,0x04,0x04,0x04,0x04,0x04,0x04]),        # 5*7
            ".": self.Character(width=4, rows=[0x00,0x00,0x00,0x00,0x00,0x00,0x01]),        # 1×7
            "-": self.Character(width=4, rows=[0x00,0x00,0x00,0x03,0x00,0x00,0x00]),        # 2×7
            "M": self.Character(width=4, rows=[0x00,0x11,0x1B,0x15,0x11,0x11,0x11,0x11]),   # 5×7
            "/": self.Character(width=4, rows=[0x00,0x04,0x04,0x02,0x02,0x02,0x01,0x01]),   # 3×7
            "°C2": self.Character(width=4, rows=[0x00,0x01,0x0C,0x12,0x02,0x02,0x12,0x0C]), # 5×7
            "°F2": self.Character(width=4, rows=[0x00,0x01,0x1E,0x02,0x1E,0x02,0x02,0x02]),
            "V": self.Character(width=4, rows=[0x11,0x11,0x11,0x11,0x11,0x0A,0x04]),        # 5×7
            "W": self.Character(width=4, rows=[0x11,0x11,0x11,0x15,0x15,0x1B,0x11]),        # 5×7
        }
        self.digital_tube = {
            "0": [0x0F,0x09,0x09,0x09,0x09,0x09,0x0F],
            "1": [0x08,0x08,0x08,0x08,0x08,0x08,0x08],
            "2": [0x0F,0x08,0x08,0x0F,0x01,0x01,0x0F],
            "3": [0x0F,0x08,0x08,0x0F,0x08,0x08,0x0F],
            "4": [0x09,0x09,0x09,0x0F,0x08,0x08,0x08],
            "5": [0x0F,0x01,0x01,0x0F,0x08,0x08,0x0F],
            "5": [0x0F,0x01,0x01,0x0F,0x09,0x09,0x0F],
            "6": [0x0F,0x08,0x08,0x08,0x08,0x08,0x08],
            "7": [0x0F,0x09,0x09,0x0F,0x09,0x09,0x0F],
            "8": [0x0F,0x09,0x09,0x0F,0x08,0x08,0x0F],
            "A": [0x0F,0x09,0x09,0x0F,0x09,0x09,0x09],
            "B": [0x01,0x01,0x01,0x0F,0x09,0x09,0x0F],
            "C": [0x0F,0x01,0x01,0x01,0x01,0x01,0x0F],
            "D": [0x08,0x08,0x08,0x0F,0x09,0x09,0x0F],
            "E": [0x0F,0x01,0x01,0x0F,0x01,0x01,0x0F],
            "F": [0x0F,0x01,0x01,0x0F,0x01,0x01,0x01],
            "H": [0x09,0x09,0x09,0x0F,0x09,0x09,0x09],
            "L": [0x01,0x01,0x01,0x01,0x01,0x01,0x0F],
            "N": [0x0F,0x09,0x09,0x09,0x09,0x09,0x09],
            "P": [0x0F,0x09,0x09,0x0F,0x01,0x01,0x01],
            "U": [0x09,0x09,0x09,0x09,0x09,0x09,0x0F],
            ":": [0x00,0x03,0x03,0x00,0x03,0x03,0x00],       # 2×7
            "°C": [0x01,0x1E,0x02,0x02,0x02,0x02,0x1E],      # celcius 5×7
            "°F": [0x01,0x1E,0x02,0x1E,0x02,0x02,0x02],      # farenheit
            " ": [0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            "T": [0x1F,0x04,0x04,0x04,0x04,0x04,0x04],       # 5*7
            ".": [0x00,0x00,0x00,0x00,0x00,0x00,0x01],       # 2×7
            "-": [0x00,0x00,0x00,0x03,0x00,0x00,0x00],       # 2×7
            "M": [0x00,0x11,0x1B,0x15,0x11,0x11,0x11,0x11],  # 5×7
            "/": [0x00,0x04,0x04,0x02,0x02,0x02,0x01,0x01],  # 3×7
            "°C2": [0x00,0x01,0x0C,0x12,0x02,0x02,0x12,0x0C],# celcuis 5x7
            "°F2": [0x00,0x01,0x1E,0x02,0x1E,0x02,0x02,0x02],# farenheit
            "V": [0x11,0x11,0x11,0x11,0x11,0x11,0x1F],       # 5×7
            "W": [0x11,0x11,0x11,0x15,0x15,0x1B,0x11],       # 5×7
        }
