from machine import Pin, Timer
import random

class Display:
    def __init__(self):
        self.a0 = Pin(16, Pin.OUT)
        self.a1 = Pin(18, Pin.OUT)
        self.a2 = Pin(22, Pin.OUT)

        self.sdi = Pin(11, Pin.OUT)
        self.clk = Pin(10, Pin.OUT)
        self.le = Pin(12, Pin.OUT)

        self.CS_cnt = 0
        self.leds = [[0] * 24 for i in range(0,7)]
        self.disp_offset = 2
        self.initialise_fonts()

    def start(self):
        self.timer = Timer(period=1, callback=self.repeating_timer_callback_ms)

    def repeating_timer_callback_ms(self, timer):
        self.CS_cnt = (self.CS_cnt+1)%8
        
        for i in range(4):
            self.send_byte(self.display_buffer[8*i+self.CS_cnt])
        
        self.le.value(1)
        self.le.value(0)
        self.a0.value(self.CS_cnt&0x01)
        self.a1.value(self.CS_cnt&0x02)
        self.a2.value(self.CS_cnt&0x04)
        
    def send_byte(self, data):
        '''
        sends a single byte
        '''
        data_clone = data
        for cnt in range(8):
            self.clk.value(0)
            self.sdi.value(data_clone % 1)
            data_clone = data_clone >> 1
            self.clk.value(1)

    def show(self, pos, character):
        print("PRINTING", character)
        pos+=self.disp_offset # Plus the offset of the status indicator 
        byte_no=pos//8 # To display the number of the dot matrix 
        byte_offset=pos%8 # Start to display on the first few bits 
        char = self.ziku[character]
        for row in range(1,8):
            byte = char[row-1]
            print("\n  %02x" % byte)
            if byte_offset>0:
                existing_mask = (0xff>>(8-byte_offset))%256
                masked_byte = (byte<<byte_offset)%256
                print("  row:%d\n  byte_no:%d\n  byte_offset:%d\n  existing: %d\n  masked: %d" % (row, byte_no, byte_offset, existing_mask, masked_byte))
                self.display_buffer[8*byte_no+row]=(self.display_buffer[8*byte_no+row]& existing_mask)|masked_byte
                if(byte_no<(len(self.display_buffer)/8)-1):
                    self.display_buffer[8*byte_no+8+row]=(self.display_buffer[8*byte_no+8+row]&existing_mask)|masked_byte
            else:
                print("  aligned byte_no:%d\n  row: %d\n" % (byte_no, row)) 
                self.display_buffer[8*byte_no+row]=byte
       # print(self.display_buffer)


# Derived from c code created by yufu on 2021/1/23.
# Modulus method: negative code, reverse, line by line, 4X7 font 
    def initialise_fonts(self):
        self.ziku = {
            "0": [0x06,0x09,0x09,0x09,0x09,0x09,0x06],
            "1": [0x04,0x06,0x04,0x04,0x04,0x04,0x0E],
            "2": [0x06,0x09,0x08,0x04,0x02,0x01,0x0F],
            "3": [0x06,0x09,0x08,0x06,0x08,0x09,0x06],
            "4": [0x08,0x0C,0x0A,0x09,0x0F,0x08,0x08],
            "5": [0x0F,0x01,0x07,0x08,0x08,0x09,0x06],
            "6": [0x04,0x02,0x01,0x07,0x09,0x09,0x06],
            "7": [0x0F,0x09,0x04,0x04,0x04,0x04,0x04],
            "8": [0x06,0x09,0x09,0x06,0x09,0x09,0x06],
            "9": [0x06,0x09,0x09,0x0E,0x08,0x04,0x02],
            "A": [0x06,0x09,0x09,0x0F,0x09,0x09,0x09],
            "B": [0x07,0x09,0x09,0x07,0x09,0x09,0x07],
            "C": [0x06,0x09,0x01,0x01,0x01,0x09,0x06],
            "D": [0x07,0x09,0x09,0x09,0x09,0x09,0x07],
            "E": [0x0F,0x01,0x01,0x0F,0x01,0x01,0x0F],
            "F": [0x0F,0x01,0x01,0x0F,0x01,0x01,0x01],
            "H": [0x09,0x09,0x09,0x0F,0x09,0x09,0x09],
            "L": [0x01,0x01,0x01,0x01,0x01,0x01,0x0F],
            "N": [0x09,0x09,0x0B,0x0D,0x09,0x09,0x09],
            "P": [0x07,0x09,0x09,0x07,0x01,0x01,0x01],
            "U": [0x09,0x09,0x09,0x09,0x09,0x09,0x06],
            ":": [0x00,0x03,0x03,0x00,0x03,0x03,0x00],        #2×7
            "°C": [0x01,0x0C,0x12,0x02,0x02,0x12,0x0C],       # celcuis 5×7
            "°F": [0x01,0x1E,0x02,0x1E,0x02,0x02,0x02],       # farenheit
            " ": [0x00,0x00,0x00,0x00,0x00,0x00,0x00],        # space
            "Y": [0x1F,0x04,0x04,0x04,0x04,0x04,0x04],        # 5*7
            ".": [0x00,0x00,0x00,0x00,0x00,0x00,0x01],        # 1×7
            "-": [0x00,0x00,0x00,0x03,0x00,0x00,0x00],        # 2×7
            "M": [0x00,0x11,0x1B,0x15,0x11,0x11,0x11,0x11],   # 5×7
            "/": [0x00,0x04,0x04,0x02,0x02,0x02,0x01,0x01],   # 3×7
            "°C2": [0x00,0x01,0x0C,0x12,0x02,0x02,0x12,0x0C], # 5×7
            "°F2": [0x00,0x01,0x1E,0x02,0x1E,0x02,0x02,0x02],
            "V": [0x11,0x11,0x11,0x11,0x11,0x0A,0x04],        # 5×7
            "W": [0x11,0x11,0x11,0x15,0x15,0x1B,0x11],        # 5×7
        }
        self.digital_tube = {
            "0": [0x0F,0x09,0x09,0x09,0x09,0x09,0x0F],
            "1": [0x08,0x08,0x08,0x08,0x08,0x08,0x08],
            "2": [0x0F,0x08,0x08,0x0F,0x01,0x01,0x0F],
            "3": [0x0F,0x08,0x08,0x0F,0x08,0x08,0x0F],
            "4": [0x09,0x09,0x09,0x0F,0x08,0x08,0x08],
            "5": [0x0F,0x01,0x01,0x0F,0x08,0x08,0x0F],
            "5": [0x0F,0x01,0x01,0x0F,0x09,0x09,0x0F],
            "6": [0x0F,0x08,0x08,0x08,0x08,0x08,0x08],
            "7": [0x0F,0x09,0x09,0x0F,0x09,0x09,0x0F],
            "8": [0x0F,0x09,0x09,0x0F,0x08,0x08,0x0F],
            "A": [0x0F,0x09,0x09,0x0F,0x09,0x09,0x09],
            "B": [0x01,0x01,0x01,0x0F,0x09,0x09,0x0F],
            "C": [0x0F,0x01,0x01,0x01,0x01,0x01,0x0F],
            "D": [0x08,0x08,0x08,0x0F,0x09,0x09,0x0F],
            "E": [0x0F,0x01,0x01,0x0F,0x01,0x01,0x0F],
            "F": [0x0F,0x01,0x01,0x0F,0x01,0x01,0x01],
            "H": [0x09,0x09,0x09,0x0F,0x09,0x09,0x09],
            "L": [0x01,0x01,0x01,0x01,0x01,0x01,0x0F],
            "N": [0x0F,0x09,0x09,0x09,0x09,0x09,0x09],
            "P": [0x0F,0x09,0x09,0x0F,0x01,0x01,0x01],
            "U": [0x09,0x09,0x09,0x09,0x09,0x09,0x0F],
            ":": [0x00,0x03,0x03,0x00,0x03,0x03,0x00],       # 2×7
            "°C": [0x01,0x1E,0x02,0x02,0x02,0x02,0x1E],      # celcius 5×7
            "°F": [0x01,0x1E,0x02,0x1E,0x02,0x02,0x02],      # farenheit
            " ": [0x00,0x00,0x00,0x00,0x00,0x00,0x00],
            "T": [0x1F,0x04,0x04,0x04,0x04,0x04,0x04],       # 5*7
            ".": [0x00,0x00,0x00,0x00,0x00,0x00,0x01],       # 2×7
            "-": [0x00,0x00,0x00,0x03,0x00,0x00,0x00],       # 2×7
            "M": [0x00,0x11,0x1B,0x15,0x11,0x11,0x11,0x11],  # 5×7
            "/": [0x00,0x04,0x04,0x02,0x02,0x02,0x01,0x01],  # 3×7
            "°C2": [0x00,0x01,0x0C,0x12,0x02,0x02,0x12,0x0C],# celcuis 5x7
            "°F2": [0x00,0x01,0x1E,0x02,0x1E,0x02,0x02,0x02],# farenheit
            "V": [0x11,0x11,0x11,0x11,0x11,0x11,0x1F],       # 5×7
            "W": [0x11,0x11,0x11,0x15,0x15,0x1B,0x11],       # 5×7
        }
